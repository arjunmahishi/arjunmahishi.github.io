{"pageProps":{"postData":{"id":"dlv-cli-runbook","contentHTML":"<html><head></head><body><ol class=\"toc toc-level toc-level-1\"><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#install-delve\">Install Delve</a></li><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#running-the-program-with-delve\">Running the program with delve</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h4\"><a class=\"toc-link toc-link-h4\" href=\"#running-with-arguments\">Running with arguments</a></li></ol></li><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#attaching-to-a-running-process\">Attaching to a running process</a></li><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#debugging-go-routines\">Debugging go routines</a></li><li class=\"toc-item toc-item-h3\"><a class=\"toc-link toc-link-h3\" href=\"#interactions-in-the-debugger\">Interactions in the debugger</a><ol class=\"toc-level toc-level-2\"><li class=\"toc-item toc-item-h4\"><a class=\"toc-link toc-link-h4\" href=\"#setting-breakpoints\">Setting breakpoints</a></li><li class=\"toc-item toc-item-h4\"><a class=\"toc-link toc-link-h4\" href=\"#printing-variables\">Printing variables</a></li><li class=\"toc-item toc-item-h4\"><a class=\"toc-link toc-link-h4\" href=\"#stepping-through-code\">Stepping through code</a></li><li class=\"toc-item toc-item-h4\"><a class=\"toc-link toc-link-h4\" href=\"#mutating-variable-values\">Mutating variable values</a></li></ol></li></ol><p>I have a constant ongoing inner battle staying away from IDEs. For many\nreasons, I prefer using a terminal based text editor and the command line for\nmost of my development tasks. But when it comes to debugging, I always find\nmyself reaching for Goland. I couldn't for the life of me figure out debugging\nwith nvim and delve. I tried a couple of times but always ended up frustrated\nand went back to Goland.</p>\n<p>But not anymore. I finally starting to get comfortable with debugging using the\ndelve CLI. This post is a runbook of workflows I use to debug Go programs using\nthe delve CLI. This will be an ever growing list of workflows as I learn more about\nthe delve CLI. So, watch this space for updates.</p>\n<h3 id=\"install-delve\"><a class=\"anchor\" href=\"#install-delve\">Install Delve</a></h3>\n<p>The first step is to install delve. You can install delve using the following\ncommand:</p>\n<div class=\"remark-highlight\"><pre class=\"language-sh\"><code class=\"language-sh\">go <span class=\"token function\">install</span> github.com/go-delve/delve/cmd/dlv@latest\n</code></pre></div>\n<h3 id=\"running-the-program-with-delve\"><a class=\"anchor\" href=\"#running-the-program-with-delve\">Running the program with delve</a></h3>\n<h4 id=\"running-with-arguments\"><a class=\"anchor\" href=\"#running-with-arguments\">Running with arguments</a></h4>\n<h3 id=\"attaching-to-a-running-process\"><a class=\"anchor\" href=\"#attaching-to-a-running-process\">Attaching to a running process</a></h3>\n<h3 id=\"debugging-go-routines\"><a class=\"anchor\" href=\"#debugging-go-routines\">Debugging go routines</a></h3>\n<h3 id=\"interactions-in-the-debugger\"><a class=\"anchor\" href=\"#interactions-in-the-debugger\">Interactions in the debugger</a></h3>\n<h4 id=\"setting-breakpoints\"><a class=\"anchor\" href=\"#setting-breakpoints\">Setting breakpoints</a></h4>\n<h4 id=\"printing-variables\"><a class=\"anchor\" href=\"#printing-variables\">Printing variables</a></h4>\n<h4 id=\"stepping-through-code\"><a class=\"anchor\" href=\"#stepping-through-code\">Stepping through code</a></h4>\n<h4 id=\"mutating-variable-values\"><a class=\"anchor\" href=\"#mutating-variable-values\">Mutating variable values</a></h4>\n</body></html>","title":"Debugging like a savage with Delve CLI","date":"2024-09-01","tags":["cli","debugging","golang"],"image":"https://i.imgur.com/CUkXvDf.png","toc":true,"draft":true,"readTime":"1 min read"}},"__N_SSG":true}