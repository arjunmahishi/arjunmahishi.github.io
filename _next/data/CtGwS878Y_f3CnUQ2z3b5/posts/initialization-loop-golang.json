{"pageProps":{"postData":{"id":"initialization-loop-golang","contentHTML":"<h1>Initialization Loop in Golang</h1>\n<p>A couple of days ago, I was writing a program in Go and ran into an <code>initialization loop</code>. I was able to quickly fix it with 1 google search which landed on <a href=\"https://stackoverflow.com/questions/51667411/initialization-loop-golang\">this StackOverflow question</a>. But it didn't explain <strong>what</strong> an init loop is and <strong>why</strong> it occurs. So, this post is an attempt to explain the what and the why.</p>\n<h4>Example of an init loop</h4>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  globalFunc <span class=\"token operator\">=</span> func1\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">globalFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> \n</code></pre></div>\n<p>Trying to compile the above code will give you this error:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">./main.go:4:2: initialization loop:\n        /tmp/test/main.go:4:2: globalFunc refers to\n        /tmp/test/main.go:9:6: func1 refers to\n        /tmp/test/main.go:13:6: func2 refers to\n        /tmp/test/main.go:4:2: globalFunc</code></pre></div>\n<h4>The What</h4>\n<p>Looking at the error message, it should be quite clear <strong>what</strong> an initialization loop is. <code>globalFunc</code> refers to <code>func1</code>, <code>func1</code> refers to <code>func2</code>, <code>func2</code> refers to <code>globalFunc</code> - creating a loop. The problem is not referencing things in a loop. The problem is while initializing things. The compiler can't decide <strong>what</strong> to initialize first. That's why it refuses to compile the code and throws an error.</p>\n<h4>The Why</h4>\n<p>To understand why the compiler can't decide what to initialize first, you'll need to understand what order the compiler initializes things in.</p>\n<p><strong>The order of initialization in Go</strong></p>\n<ol>\n<li>Imported packages</li>\n<li>Globally declared variables/constants</li>\n<li><code>init()</code> function</li>\n</ol>\n<p>Within the global variables, the order depends on references. If one variable is referencing another, the <strong>referenced</strong> variable is initialized first. Example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  a <span class=\"token operator\">=</span> b <span class=\"token operator\">/</span> <span class=\"token number\">10</span>\n  b <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token comment\">// initialised first</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Here, <code>b</code> is initialized first because <code>a</code> depends on it. But if the variables are <strong>not</strong> dependant on each other, they will be initialized in the order they are declared in.</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  a <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token comment\">// initilized first</span>\n  b <span class=\"token operator\">=</span> <span class=\"token number\">100</span>\n<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>When the dependency of variables forms a loop, it throws the error (like the first code snippet).</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  a <span class=\"token operator\">=</span> b <span class=\"token operator\">/</span> <span class=\"token number\">10</span>\n  b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// compiler: lol ü§£</span>\n</code></pre></div>\n<p>So, how do we fix this?<br></p>\n<h4>The Solution</h4>\n<p><em>Enter <code>init()</code> function</em></p>\n<p>When the dependency of variables forms a loop, the order of initialization can be enforced using the init function. What that means is, the variables should just be declared globally and the <em>initialization</em> should be done in the init function. So, the corrected first snippet would look something like this:</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  globalFunc <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// declaration with func() as type</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  globalFunc <span class=\"token operator\">=</span> func1 <span class=\"token comment\">// initialize value</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">func1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">globalFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// compiler: ü§†</span>\n</code></pre></div>\n<p>Simpler example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n  a<span class=\"token punctuation\">,</span> b <span class=\"token builtin\">int</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a <span class=\"token operator\">=</span> b <span class=\"token operator\">/</span> <span class=\"token number\">10</span>\n  b <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> <span class=\"token number\">10</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<hr>\n<p>This is probably a very fundamental and obvious concept to many people. But I encountered this error for the first time. I thought writing a mini blog post about it would help me (and hopefully more Golang noobs) understand it a little better. If you spot a mistake in what I've explained or see a typo, <a href=\"https://twitter.com/messages/131552332-131552332?recipient_id=131552332&#x26;text=hi\">slide into my twitter DM</a>. Thanks üôèüèΩ</p>\n<h4>References</h4>\n<ul>\n<li>https://github.com/golang/go/issues/1817</li>\n<li>https://golang.org/doc/effective_go#initialization</li>\n</ul>\n","title":"Initialization Loop in Golang","date":"2021-08-22","tags":["golang"]}},"__N_SSG":true}