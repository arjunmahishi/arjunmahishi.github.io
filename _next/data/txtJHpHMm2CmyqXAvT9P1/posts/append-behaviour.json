{"pageProps":{"postData":{"id":"append-behaviour","contentHTML":"<html><head></head><body><h2 id=\"part-1\"><a class=\"anchor\" href=\"#part-1\">Part 1</a></h2>\n<p>I got to do some tricky string manipulation involving non-unicode characters\nlast week. While working on that, I came across an unexpected behaviour of the\n<code>append</code> function in Go. Consider this code snippet:</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\ta<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// A</span>\n\n\tb <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// A</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AB</span>\n\n\tb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'C'</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// CB</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ??</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>What will the last print statement print? Try to guess it before running the\ncode. Here's a link to the playground if you want to run it: <a href=\"https://go.dev/play/p/MUrcymmITef\">https://go.dev/play/p/MUrcymmITef</a></p>\n<p>This is the output of the code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">A\nA\nAB\nCB\nC ðŸ‘ˆ WHAT!?</code></pre></div>\n<p>I always assumed that <code>append</code> would create a new slice and copy the elements\nfrom the original slice to the new one. But apparently, that's not the case.\nAppend only creates a new slice if the capacity of the original slice is less\nthan the required capacity. In this case, the capacity of the original slice is\n4 and the required capacity is 2 (what <code>a</code> already has + 'B'). So, <code>append</code>\njust appends the new element to the same underlying slice that <code>a</code> is pointing\nto.</p>\n<p>But if you see the second print statement, it prints <code>A</code> instead of <code>AB</code>. This\nis because <code>a</code> only has access the first element of the underlying array. Pay attention to the <code>make</code> call.</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\">a <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>The second argument to <code>make</code> is the length of the slice and the third argument\nis the capacity of the slice. So, even though memory of 4 bytes is allocated, <code>a</code>\nonly has access to the first byte. When <code>append</code> is called, it appends the new\nelement to the underlying array and returns a new slice. But <code>a</code> still points\nto the first element of the underlying array. That's why we don't see 'B' in the\nsecond print statement.</p>\n<p>We notice the mutation of <code>a</code> when we change the first element of <code>b</code> to 'C'. This\nchange is reflected in <code>a</code> as well. This is why the last print statement prints\n<code>C</code>.</p>\n<hr>\n<h2 id=\"part-2\"><a class=\"anchor\" href=\"#part-2\">Part 2</a></h2>\n<p>Now, change the <code>make</code> call to <code>a := make([]byte, 4)</code> and run the code again.</p>\n<div class=\"remark-highlight\"><pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ta <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n\ta<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'A'</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// A</span>\n\n\tb <span class=\"token operator\">:=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token char\">'B'</span><span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// A</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// AB</span>\n\n\tb<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token char\">'C'</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// CB</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ??</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>Go playground: <a href=\"https://go.dev/play/p/8phhB2NtZze\">https://go.dev/play/p/8phhB2NtZze</a></p>\n<p>This is the output of the code:</p>\n<div class=\"remark-highlight\"><pre class=\"language-unknown\"><code class=\"language-unknown\">A\nA\nAB\nCB\nA</code></pre></div>\n<p>This was the second TIL.</p>\n<p>When you do <code>make([]byte, 1, 4)</code>, you allocate 4 bytes of memory. And initialize\nthe <strong>first byte to it's zero value</strong>.</p>\n<p>When you do <code>make([]byte, 4)</code>, you allocate 4 bytes of memory. And initialize\n<strong>all the bytes to their zero value</strong>. This leaves no memory for <code>append</code> to\nreuse. So, <code>append</code> creates a new slice with the same length and capacity as\nthe original slice. This is why the last print statement prints <code>A</code>.</p>\n<hr>\n<p>I hope you found this as interesting as I did. This gave me a headache for a\nwhile. But after figuring out the nuances, it felt good. I don't really have an\nopinion on whether this behaviour is good or bad. But it's good to know that\nthis is how <code>append</code> works in Go.</p>\n</body></html>","title":"append: to copy or not to copy","date":"2025-02-04","tags":["golang"],"readTime":"3 min read"}},"__N_SSG":true}