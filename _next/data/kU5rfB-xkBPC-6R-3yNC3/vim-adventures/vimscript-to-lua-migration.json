{"pageProps":{"postData":{"id":"vimscript-to-lua-migration","contentHTML":"<html><head></head><body><p>I've been wanting to rewrite my neovim config in Lua for a really long time. I didn't really know why. Just wanted to do it. Lua has a more sane and intuitive syntax compared to vimscript. So, it ends up being easier to maintain, refactor and extend. Plus, I think the entire neovim community is moving forward in this direction. I am hearing good things about vimscript in vim9, but maybe that will be an opportunity for another such blog post.</p>\n<p>This blog post is for you if you are thinking to move to lua but didn't know where to start or haven't thought about moving to lua yet or even if you just enjoy the occasional vim-related content.</p>\n<h3 id=\"do-you-need-to-be-a-lua-expert\"><a class=\"anchor\" href=\"#do-you-need-to-be-a-lua-expert\">Do you need to be a lua expert?</a></h3>\n<p>Absolutely not, even after rewriting my entire config in lua, I still don't know even the most basic things like iterating over a list, creating a class (if classes are even there), etc. If you know basic programming and have gone through someone else's code before, you are good to go.</p>\n<h3 id=\"some-basic-lua-to-help-get-started\"><a class=\"anchor\" href=\"#some-basic-lua-to-help-get-started\">Some basic lua to help get started</a></h3>\n<p>Here are some of the things you will encounter</p>\n<p>Function syntax</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token keyword\">function</span> <span class=\"token function\">func_name</span><span class=\"token punctuation\">(</span>arg1<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">\"epic things\"</span>\n<span class=\"token keyword\">end</span>\n\nfunc_name <span class=\"token string\">'arg1 value'</span> <span class=\"token comment\">-- like ruby</span>\n</code></pre></div>\n<p>Array syntax</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\">arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span>\narr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Map syntax (called tables in lua)</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\">tb1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> key1 <span class=\"token operator\">=</span> <span class=\"token string\">'val1'</span><span class=\"token punctuation\">,</span> key2 <span class=\"token operator\">=</span> <span class=\"token string\">'val2'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span>tb1<span class=\"token punctuation\">.</span>key2<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>Syntax to run vim script (required as not everything is supported yet in lua)</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- inline</span>\nvim<span class=\"token punctuation\">.</span>cmd <span class=\"token operator\">=</span> <span class=\"token string\">\"echo 'hello world'\"</span>\n\n<span class=\"token comment\">-- multi-line</span>\nvim<span class=\"token punctuation\">.</span>cmd <span class=\"token string\">[[</span>\n<span class=\"token string\">  echo 'hello world'</span>\n<span class=\"token string\">  echo 'can't think of a better example'</span>\n<span class=\"token string\">]]</span>\n\n<span class=\"token comment\">-- NOTE: multi-line strings in lua are defined with </span>\n<span class=\"token comment\">-- double square brackets `[[]]`</span>\n</code></pre></div>\n<h3 id=\"deep-dive\"><a class=\"anchor\" href=\"#deep-dive\">Deep dive</a></h3>\n<h5 id=\"structure-of-the-config-file\"><a class=\"anchor\" href=\"#structure-of-the-config-file\">Structure of the config file</a></h5>\n<blockquote>\n<p>The lua config is kept in a file called <code>init.lua</code> in the <code>~/.config/nvim</code> directory (just like <code>init.vim</code>)</p>\n</blockquote>\n<p>So far, I've kept the entire config in one file. This is mainly to make it more sharable. All you have to do to use my config is, copy-paste the entire file and run <code>vim +PlugInstall</code>. But this is not necessary. You can choose to organize it in separate files. In VimConf 2021, there was a speaker who maintained a separate file for configuring each plugin.</p>\n<p>My config is divided into several blocks:</p>\n<ol>\n<li>Plugins -- declare all the plugins with vim-plug</li>\n<li>Basic vim settings -- these are the basic editor settings like enabling relative numbering, disabling highlighting, etc</li>\n<li>Custom key mapping -- this is my favorite section, where all the remaps live</li>\n<li>The remaining blocks are dedicated to individual plugin config</li>\n</ol>\n<h5 id=\"basic-settings\"><a class=\"anchor\" href=\"#basic-settings\">Basic settings</a></h5>\n<p>I have a bunch of settings that enable/disable vim features, set stuff, etc. Translating these to lua is very easy. Lua exposes each setting as a member of the <code>vim.opt</code>. So, setting the relative numbering would be <code>vim.opt.relativenumber = true</code>.</p>\n<p><strong>More examples</strong></p>\n<p>vimscript</p>\n<div class=\"remark-highlight\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token keyword\">set</span> relativenumber\n<span class=\"token keyword\">set</span> <span class=\"token keyword\">number</span>\n<span class=\"token keyword\">set</span> <span class=\"token builtin\">incsearch</span>\n<span class=\"token keyword\">set</span> colorcolumn<span class=\"token operator\">=</span><span class=\"token number\">121</span>\n<span class=\"token keyword\">set</span> <span class=\"token builtin\">mouse</span><span class=\"token operator\">=</span>a\n</code></pre></div>\n<p>the lua equalent</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\">vim<span class=\"token punctuation\">.</span>opt<span class=\"token punctuation\">.</span>relativenumber <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\nvim<span class=\"token punctuation\">.</span>opt<span class=\"token punctuation\">.</span>number <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\nvim<span class=\"token punctuation\">.</span>opt<span class=\"token punctuation\">.</span>incsearch <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span>\nvim<span class=\"token punctuation\">.</span>opt<span class=\"token punctuation\">.</span>colorcolumn <span class=\"token operator\">=</span> <span class=\"token string\">'121'</span>\nvim<span class=\"token punctuation\">.</span>opt<span class=\"token punctuation\">.</span>mouse <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span>\n</code></pre></div>\n<p>Similarly translated all the settings</p>\n<p>Some things like <code>syntax enable</code> and <code>colorscheme onedark</code> were not available. So, I had to use inline vim script</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\">vim<span class=\"token punctuation\">.</span>cmd <span class=\"token string\">'syntax enable'</span>\nvim<span class=\"token punctuation\">.</span>cmd <span class=\"token string\">'colorscheme onedark'</span>\n</code></pre></div>\n<h5 id=\"custom-key-mapping\"><a class=\"anchor\" href=\"#custom-key-mapping\">Custom key mapping</a></h5>\n<p>Like the settings, key mappings are also pretty easy. Lua provides the function <code>vim.api.nvim_set_keymap</code> to set custom key mapping. This function takes the mode, key, commands, etc as arguments.</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\"><span class=\"token comment\">-- global variables are modified like this</span>\nvim<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>mapleader <span class=\"token operator\">=</span> <span class=\"token string\">' '</span>\n\n<span class=\"token comment\">-- assign the function to a variable called map (cleaner)</span>\n<span class=\"token keyword\">local</span> map <span class=\"token operator\">=</span> vim<span class=\"token punctuation\">.</span>api<span class=\"token punctuation\">.</span>nvim_set_keymap\n<span class=\"token comment\">-- define a table with noremap as true, which can be used for some of the mappings</span>\n<span class=\"token keyword\">local</span> noremap <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> noremap <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'vv'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':vsplit&#x3C;CR> l'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">':tabnew&#x3C;CR>'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x3C;leader>h'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x3C;c-w>h'</span><span class=\"token punctuation\">,</span> noremap<span class=\"token punctuation\">)</span>\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x3C;leader>j'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x3C;c-w>j'</span><span class=\"token punctuation\">,</span> noremap<span class=\"token punctuation\">)</span>\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x3C;leader>k'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x3C;c-w>k'</span><span class=\"token punctuation\">,</span> noremap<span class=\"token punctuation\">)</span>\n<span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x3C;leader>l'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'&#x3C;c-w>l'</span><span class=\"token punctuation\">,</span> noremap<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<p>The 'n' you see as the first arguement stands for <em>normal mode</em>. You can also have  'i' (insert), 'v' (visual) and 't' (terminal)</p>\n<p><code>autocmd</code> is still not supported in lua. So, they need to be defined in vimscript</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\">vim<span class=\"token punctuation\">.</span>cmd <span class=\"token string\">[[</span>\n<span class=\"token string\">  au filetype json nmap &#x3C;leader>f :%!jq '.' %&#x3C;CR></span>\n<span class=\"token string\">  au filetype hcl nmap &#x3C;leader>f :%!hclfmt %&#x3C;CR></span>\n<span class=\"token string\">]]</span>\n</code></pre></div>\n<p>(FYI: I've written <a href=\"https://arjunmahishi.com/vim-adventures/prettify-json/\">a blog post</a> that explains the above commands)</p>\n<h5 id=\"configuring-plugins\"><a class=\"anchor\" href=\"#configuring-plugins\">Configuring plugins</a></h5>\n<p>Most of my plugin config involved setting global values and key mappings. As mentioned earlier, vim global values are set in lua using <code>vim.g.&#x3C;var name></code></p>\n<p>vim config</p>\n<div class=\"remark-highlight\"><pre class=\"language-vim\"><code class=\"language-vim\"><span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>go_highlight_fields <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>go_highlight_functions <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>go_highlight_function_calls <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>go_highlight_operators <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>go_fmt_command <span class=\"token operator\">=</span> <span class=\"token string\">\"goimports\"</span>\n</code></pre></div>\n<p>lua equalent</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\">vim<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>go_highlight_fields <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nvim<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>go_highlight_functions <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nvim<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>go_highlight_function_calls <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nvim<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>go_highlight_operators <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nvim<span class=\"token punctuation\">.</span>g<span class=\"token punctuation\">.</span>go_fmt_command <span class=\"token operator\">=</span> <span class=\"token string\">\"goimports\"</span>\n</code></pre></div>\n<p>If the config is complicated for any plugin, just dump it in <code>vim.cmd [[]]</code> :P</p>\n<p>If the plugin was written in lua, it will usually have a setup function that you can call. Example:</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\">require<span class=\"token string\">'nvim-treesitter.configs'</span><span class=\"token punctuation\">.</span><span class=\"token function\">setup</span> <span class=\"token punctuation\">{</span>\n  ensure_installed <span class=\"token operator\">=</span> <span class=\"token string\">\"maintained\"</span><span class=\"token punctuation\">,</span>\n  highlight <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    enable <span class=\"token operator\">=</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span>\n    additional_vim_regex_highlighting <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3 id=\"thats-it\"><a class=\"anchor\" href=\"#thats-it\">That's it!</a></h3>\n<p>Wasn't very complecated was it?</p>\n<p>You can also have a hybrid config -- using both vimscript and lua. All you have to do is, create a new file to keep your vimscript in and import it in the <code>init.lua</code> file. I had done this for my coc config (until I stopped using it)</p>\n<div class=\"remark-highlight\"><pre class=\"language-lua\"><code class=\"language-lua\">vim<span class=\"token punctuation\">.</span>cmd <span class=\"token string\">'runtime! coc-config.vim'</span>\n</code></pre></div>\n<p>I am not entirely sure if doing this is worth your time. So don't do this in the middle of work or if you are busy with something more important. For me, this was triggered by boredom + the Diwali holidays. Hope this helps.</p>\n<p><a href=\"https://github.com/arjunmahishi/dotfiles/blob/e6db1db76ff5f886ddd7f91e830117e471078e07/common/init.lua\">This</a> is my final <code>init.lua</code> at the time of writing this post (the link is to a specific commit)</p>\n</body></html>","title":"Rewriting my existing neovim config in lua","date":"2021-11-05","tags":["vim"]}},"__N_SSG":true}