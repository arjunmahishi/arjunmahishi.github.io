[{"content":"straight from documentation stringer is tool automate creation of methods that satisfy fmt.stringer interface given name signed or unsigned integer type has constants defined will create new self-contained go source file implementing func string created same package directory as defines it helpful defaults designed for use generate among other golang tools which help us writing good code this cli used via another comes auto-generating you can explore more about their so we command necessary implement fmt’s conceptually very simple but well there no only flag lists available flags these are useful ignored by many people they give control over how final output formatted what generally concept enumeration while avoiding hard-coding values enum when want define finite fixed set example types dishes menu appetizers main course desserts pokemon grass water fire .. etc sets should avoid hard coding them lead human errors like spelling mistakes if something once make sure after just without worrying hands-on enums be extending declare variables each element hold value1 value2 internally index don’t have manually initialise value elements provides identifier called incrementally let’s look at sample int let\u0026rsquos see some examples -type compulsory argument belongs also supports list comma-separated names method generated all method’s definition put separate default named both definitions single herotype_string.go files need two comments run every time regenerated important do not edit get overwritten -output explicitly specify override that’s pretty much does above wanted type’s generations into -trimprefix sometimes would descriptively prefix readable ex instead exact reflected trim before generating specified rest text function return “herotype” trimmed off “strength” “agility” “intelligence” -linecomment customising returns lets whatever particular object custom adding comment on line “led-zeppelin” “pink-floyd” “post-malone” way “-” cases special characters start lower case keep variable camel-case snake-case note space -tags build tags conditionally am specifically tried find out couldn’t online know any please below fairly hope post clarity","date":"2020-01-28","description":null,"permalink":"https://arjunmahishi.com/posts/golang-stringer/","tags":["golang","tools","good-practices"],"title":"Using Golang's Stringer tool"},{"content":"testing activity hated by most human beings is investigation done make sure that code we have written reliable meets given requirements common way test write unit tests for different units of codebase this makes it easy isolate bugs all software development processes include as integral part one are going talk about today called driven or tdd short test-driven process where before writing any only pass those know sounds stupid but believe me very effective practice ensures absolutely required so our minimalistic general idea get case assuming there fulfilling repeated until met you can see iterative these steps better known laws coined robert cecil martin uncle bob living legends programming recommend following his work if into good practices formally stated follows can’t production first failing more than sufficient fail not compiling currently enough theory let’s take up example actually try hands-on will be using golang implement concept build simple function list multiples within range numbers fairly problem solve look at step create package now need two files contain main cases use library it’s straight forward understand install running let\u0026rsquos return along empty slice found according requirement tdd_test.go usual argument should object builtin which later already exists calling give us containing multiple between like run terminal obviously some go file declare arguments expected defines expects means number divided reminder iterate through fit passes think oddly satisfying since back new next also let call expect fails just add another condition update do again last no without having congratulations long pointless small when complicated affects millions people could save your life bit slow clean never slowed down bad coverage pretty high follow fact 100% nutshell hope post gave perspective on how useful may efficient deadline definitely foolproof","date":"2018-07-31","description":null,"permalink":"https://arjunmahishi.com/posts/tdd-with-golang/","tags":["golang","good-practices"],"title":"Test-driven development with Golang"}]